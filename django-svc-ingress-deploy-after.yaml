apiVersion: v1
kind: Service
metadata:
  name: django-svc
spec:
  selector:
    app: django-app
  ports:
    - port: 80
      targetPort: 8000
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: django-ingres
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /logistics/health
    alb.ingress.kubernetes.io/success-codes: '200-301'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '3' 
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/load-balancer-name: django-app
spec:
  rules:
    - http:
        paths:
          - path: /logistics
            pathType: Prefix
            backend:
              service:
                name: django-svc
                port: 
                  number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-app
  namespace: default
  labels:
    app: django-app
spec:
  selector:
    matchLabels:
      app: django-app
  template:
    metadata:
      labels:
        app: django-app
    spec:
      containers:
        - name: app
          lifecycle:
            preStop:
              exec:
                # Allow existing requests complete within 120 seconds
                command: ["/bin/sh", "-c", "sed -i 's/health/nothealthy/g' /usr/src/app/logistics/health.py && sleep 120"]
          readinessProbe:
            httpGet:
              path: /logistics/health
              port: 8000
            initialDelaySeconds: 3
            periodSeconds: 3
          image: ${AWS_ACCOUNT_ID}.dkr.ecr.us-west-2.amazonaws.com/djangoapp:py39aarch64
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 512m
              memory: 512Mi
          ports:
            - containerPort: 8000
